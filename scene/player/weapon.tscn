[gd_scene load_steps=12 format=3 uid="uid://2m640fvers00"]

[ext_resource type="Script" path="res://Classes/WeaponController.cs" id="1_gipke"]
[ext_resource type="Resource" uid="uid://bj3aghrxpian4" path="res://weapons/m4/m4.tres" id="2_rdcef"]
[ext_resource type="Animation" uid="uid://hl1v8cscko3i" path="res://weapons/m4/m4_shoot.res" id="3_ie0e2"]
[ext_resource type="Texture2D" uid="uid://crqjom7122jrn" path="res://weapons/Muzzle_flash_VFX_3.png" id="3_onyn7"]

[sub_resource type="AnimationLibrary" id="AnimationLibrary_bfvg5"]

[sub_resource type="AnimationLibrary" id="AnimationLibrary_jilcd"]
_data = {
"Shoot": ExtResource("3_ie0e2"),
"m4_shoot": ExtResource("3_ie0e2")
}

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_f0kb4"]
angle_min = -360.0
angle_max = 360.0
direction = Vector3(0, 1, 0)
initial_velocity_min = 20.0
initial_velocity_max = 20.0
gravity = Vector3(0, 0, 0)

[sub_resource type="Shader" id="Shader_u4fnm"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.2.stable.mono's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform int particles_anim_h_frames;
uniform int particles_anim_v_frames;
uniform bool particles_anim_loop;
uniform sampler2D texture_emission : source_color, hint_default_black,filter_linear_mipmap,repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	mat4 mat_world = mat4(normalize(INV_VIEW_MATRIX[0]), normalize(INV_VIEW_MATRIX[1]) ,normalize(INV_VIEW_MATRIX[2]), MODEL_MATRIX[3]);
	mat_world = mat_world * mat4(vec4(cos(INSTANCE_CUSTOM.x), -sin(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0));
	MODELVIEW_MATRIX = VIEW_MATRIX * mat_world;
	MODELVIEW_NORMAL_MATRIX = mat3(MODELVIEW_MATRIX);
	float h_frames = float(particles_anim_h_frames);
	float v_frames = float(particles_anim_v_frames);
	float particle_total_frames = float(particles_anim_h_frames * particles_anim_v_frames);
	float particle_frame = floor(INSTANCE_CUSTOM.z * float(particle_total_frames));
	if (!particles_anim_loop) {
		particle_frame = clamp(particle_frame, 0.0, particle_total_frames - 1.0);
	} else {
		particle_frame = mod(particle_frame, particle_total_frames);
	}
	UV /= vec2(h_frames, v_frames);
	UV += vec2(mod(particle_frame, h_frames) / h_frames, floor((particle_frame + 0.5) / h_frames) / v_frames);
}






void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	vec3 emission_tex = texture(texture_emission,base_uv).rgb;
	EMISSION = (emission.rgb+emission_tex)*emission_energy;
	ALPHA *= albedo.a * albedo_tex.a;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_gquur"]
render_priority = 0
shader = SubResource("Shader_u4fnm")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/particles_anim_h_frames = 1
shader_parameter/particles_anim_v_frames = 1
shader_parameter/particles_anim_loop = false
shader_parameter/emission = Color(0, 0, 0, 1)
shader_parameter/emission_energy = 16.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = ExtResource("3_onyn7")
shader_parameter/texture_emission = ExtResource("3_onyn7")

[sub_resource type="QuadMesh" id="QuadMesh_8becj"]
material = SubResource("ShaderMaterial_gquur")
size = Vector2(0.2, 0.2)

[sub_resource type="BoxShape3D" id="BoxShape3D_743de"]

[node name="Weapon" type="Node3D" groups=["weapon"]]
transform = Transform3D(-0.015, 0, -1.31134e-09, 0, 0.015, 0, 1.31134e-09, 0, -0.015, 0.444, -0.233, -0.265)
script = ExtResource("1_gipke")
Weapon = ExtResource("2_rdcef")
Magazine = 30
Ammo = 120

[node name="InnerWeapon" type="Node3D" parent="."]

[node name="AnimationPlayer" type="AnimationPlayer" parent="InnerWeapon"]
root_node = NodePath("../..")
libraries = {
"": SubResource("AnimationLibrary_bfvg5"),
"weapon": SubResource("AnimationLibrary_jilcd")
}

[node name="Muzzle" type="Node3D" parent="InnerWeapon"]
transform = Transform3D(1, 0, 1.77636e-13, 0, 1, 0, -1.77636e-13, 0, 1, -5.72205e-06, 7.80287, 65.2001)

[node name="GPUParticles3D" type="GPUParticles3D" parent="InnerWeapon/Muzzle"]
transform = Transform3D(1, 0, 1.42109e-13, 0, 1, 0, -1.42109e-13, 0, 1, 0, 0, 0)
emitting = false
lifetime = 0.01
explosiveness = 1.0
process_material = SubResource("ParticleProcessMaterial_f0kb4")
draw_pass_1 = SubResource("QuadMesh_8becj")

[node name="StaticBody3D" type="StaticBody3D" parent="."]
transform = Transform3D(5, 0, 1.15935e-11, 0, 20, 0, -6.53699e-13, 0, 88.676, 0, 0, 16.8628)

[node name="CollisionShape3D" type="CollisionShape3D" parent="StaticBody3D"]
transform = Transform3D(1, 0, -4.23516e-22, 0, 1, 0, -4.23516e-22, 0, 1, 0, 0, 0)
shape = SubResource("BoxShape3D_743de")
